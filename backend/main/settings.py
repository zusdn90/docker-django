"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 3.0.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os, json
import environ
from datetime import timedelta

from django.core.exceptions import ImproperlyConfigured

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
ROOT_DIR = os.path.dirname(BASE_DIR)
#ROOT_DIR = environ.Path(__file__) - 2
env = environ.Env()

# ------------------------------------------------------------------------------
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/
# ------------------------------------------------------------------------------

DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_celery_beat',
    'django_celery_results',
]

THIRD_PARTY_APPS = [
    'rest_framework',
    'rest_framework.authtoken',
    'rest_auth', 
    'drf_yasg',
    'django_extensions',
    'corsheaders',
]

LOCAL_APPS = [
    'apps.api.kakao',
    'apps.users',
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
CORS_ALLOW_CREDENTIALS = True

# ------------------------------------------------------------------------------
# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY는 주로 쿠키데이터 해시, 암호화 등 임시적인 일에 사용되고, 변경 시 로그인 세션 등의 데이터가 사라질 수 있다. 
# ------------------------------------------------------------------------------
secret_file = os.path.join(ROOT_DIR + '/config', 'secrets.json')

with open(secret_file) as f:
    secrets = json.loads(f.read())
    
def get_secret(setting, secrets=secrets):
    """비밀 변수를 가져오거나 명시적 예외를 반환한다."""
    try:
        return secrets[setting]    
    except KeyError:
        error_msg = "Set the {} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)

SECRET_KEY = get_secret("SECRET_KEY")    


# ------------------------------------------------------------------------------
# STATIC FILE CONFIGURATION
# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-root
# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-url
# See: https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
# ------------------------------------------------------------------------------
#STATIC_ROOT = str(ROOT_DIR("staticfiles"))
#STATIC_URL = "/staticfiles/"
# STATICFILES_DIRS = [
#     str(ROOT_DIR("static")),
# ]

STATIC_URL = '/static/'     # nginx.conf의 location /static/ 경로와 맵핑
STATIC_DIR = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    STATIC_DIR,
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

MEDIA_URL = '/media/'
MEDIA_ROOT = "uploads"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ------------------------------------------------------------------------------
# HTML Template
# 공통적으로 들어가는 html코드를 관리하기 위한 확장형 template들의 경로를 설정
# ------------------------------------------------------------------------------
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# ALLOWED_HOSTS = ['127.0.0.1', '0.0.0.0', 'localhost', 'django', 'db']
ALLOWED_HOSTS = ['*']
ROOT_URLCONF = 'main.urls'
WSGI_APPLICATION = 'main.wsgi.application'

# ------------------------------------------------------------------------------
# Database
# See: https://docs.djangoproject.com/en/3.0/ref/settings/#databases
# ------------------------------------------------------------------------------
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    "default": {
        'AUTOMIC_REQUESTS':True,    # 모든 Http 요청에 대한 트랜잭션 처리
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "hwhong_dev",
        "USER": "idnstory",
        "PASSWORD": "idnstory132",
        "HOST": "db",
        "PORT": 5432,
    }
}

# ------------------------------------------------------------------------------
# DJANGO REST FRAMEWORK
# ------------------------------------------------------------------------------
REST_FRAMEWORK = {
    "UPLOADED_FILES_USE_URL": False,
    "DEFAULT_AUTHENTICATION_CLASSES": [
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        #"rest_framework_jwt.authentication.JSONWebTokenAuthentication",
    ],
    # django restful api 로긴없이 사용 불가
    # "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated",],
    "DEFAULT_PARSER_CLASSES": [
        "rest_framework.parsers.JSONParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FileUploadParser",
    ],
}

# ------------------------------------------------------------------------------
# Password validation
# See: https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators
# ------------------------------------------------------------------------------

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

# Custom User 모델 생성 시 users_user 테이블 생성
AUTH_USER_MODEL = 'users.User'

# ------------------------------------------------------------------------------
# PASSWORD STORAGE SETTINGS
# See https://docs.djangoproject.com/en/dev/ref/settings/#password-hashers
# ------------------------------------------------------------------------------
PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
]

# ------------------------------------------------------------------------------
# Logging
# debug=true일 때는 브라우저 상에서 api 500 에러가 나면, 브라우저에도 로그가 다 보임.
# debug=false로 설정 시 브라우저 상에서 500 에러시 브라우저 상에서 로그는 안보이지만 콘솔 stdout으로도 안보이는 문제가 있음.
# 아래 설정을 해주어야 보임.
# ------------------------------------------------------------------------------
from django.utils.log import DEFAULT_LOGGING

DEFAULT_LOGGING["handlers"]["console"]["filters"] = []

LOGGING = {
    "version": 1,
    # 기존의 로깅 설정을 비활성화 할 것인가?
    "disable_existing_loggers": False,
    # 포맷터
    # 로그 레코드는 최종적으로 텍스트로 표현됨
    # 이 텍스트의 포맷 형식 정의
    # 여러 포맷 정의 가능
    "formatters": {
        "verbose": {
            "format": "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
        "simple": {"format": "%(message)s"},
    },
    # 핸들러
    # 로그 레코드로 무슨 작업을 할 것인지 정의
    # 여러 핸들러 정의 가능
     "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple"
        },
        # 로그 파일을 만들어 텍스트로 로그레코드 저장
        "logfile": {
            "level": "DEBUG",
            # "class": "logging.handlers.TimedRotatingFileHandler",
            "class": "logging.FileHandler",
            "filename": "/var/log/application.log",
            # "when": "D",  # this specifies the interval
            # "interval": 1,  # defaults to 1, only necessary for other values
            #"maxBytes": 1024 * 1024 * 10, # 로그 파일 당 10M 까지
            #"backupCount": 10,  # 로그 파일을 최대 10개까지 유지
            "formatter": "simple",
        },
    },
    # 로거
    # 로그 레코드 저장소
    # 로거를 이름별로 정의
    "loggers": {"default": {"handlers": ["logfile"], "level": "DEBUG",}},
}

# ------------------------------------------------------------------------------
# Internationalization
# See: https://docs.djangoproject.com/en/3.0/topics/i18n/
# ------------------------------------------------------------------------------

LANGUAGE_CODE = "ko-kr"
TIME_ZONE = "Asia/Seoul"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# ------------------------------------------------------------------------------
# Celery 설정
# ------------------------------------------------------------------------------
CELERY_BROKER_URL = 'redis://docker.for.mac.localhost:6379'     # docker로 실행한 환경일 경우 localhost를 docker.for.mac.localhost로 변경해야한다.
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_BACKEND = 'redis://docker.for.mac.localhost:6379'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Seoul'


# ------------------------------------------------------------------------------
# JWT 설정
# See : https://jpadilla.github.io/django-rest-framework-jwt/#additional-settings
# ------------------------------------------------------------------------------
JWT_AUTH = { 
    'JWT_SECRET_KEY': SECRET_KEY, 
    'JWT_ALGORITHM': 'HS256', 
    'JWT_AUTH_HEADER_PREFIX': 'Token', 
    'JWT_EXPIRATION_DELTA': timedelta(minutes=60 * 12),
    "JWT_REFRESH_EXPIRATION_DELTA": timedelta(days=7),
}

